import requests
import io
from PIL import Image, ImageDraw, ImageFont
import textwrap

class AIGenerator:
    def __init__(self, grok_api_key):
        self.grok_api_key = grok_api_key
        self.api_url = "https://api.x.ai/v1"
    
    def generate_text(self, trend):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Grok API"""
        print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Grok API...")
        
        prompt = self._create_text_prompt(trend)
        
        try:
            response = self._make_grok_request(
                endpoint="/chat/completions",
                data={
                    "messages": [
                        {
                            "role": "system", 
                            "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏."
                        },
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    "model": "grok-4-latest",
                    "temperature": 0.7,
                    "max_tokens": 500
                }
            )
            
            if response:
                return response['choices'][0]['message']['content'].strip()
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def generate_image(self, trend):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Grok API"""
        print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Grok API...")
        
        try:
            response = self._make_grok_request(
                endpoint="/images/generations",
                data={
                    "model": "grok-image-gen-latest",
                    "prompt": self._create_image_prompt(trend),
                    "size": "1024x1024",
                    "quality": "standard",
                    "n": 1
                }
            )
            
            if response and 'data' in response:
                image_url = response['data'][0]['url']
                return self._download_image(image_url)
            return self._generate_fallback_image(trend)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return self._generate_fallback_image(trend)
    
    def _make_grok_request(self, endpoint, data):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Grok API"""
        url = f"{self.api_url}{endpoint}"
        headers = {
            "Authorization": f"Bearer {self.grok_api_key}",
            "Content-Type": "application/json"
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None
    
    def _create_text_prompt(self, trend):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        return f"""–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –Ω–∞ —Ç–µ–º—É: "{trend}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û—Å–Ω–æ–≤–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö 2024-2025
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –î–ª–∏–Ω–∞: 250-400 —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ª–µ–≥–∫–æ—Å—Ç–∏
- –≠–º–æ–¥–∑–∏ –∏ –ø—Ä–∏–∑—ã–≤ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
- 3-4 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–∞"""
    
    def _create_image_prompt(self, trend):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –Ω–∞ —Ç–µ–º—É '{trend}'. –°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, digital, —Å –∏–∫–æ–Ω–∫–∞–º–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."
    
    def _download_image(self, image_url):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        response = requests.get(image_url, timeout=30)
        if response.status_code == 200:
            return io.BytesIO(response.content)
        return None
    
    def _generate_fallback_image(self, trend):
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            width, height = 1000, 500
            image = Image.new('RGB', (width, height), color=(25, 35, 45))
            draw = ImageDraw.Draw(image)
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            for i in range(height):
                r = int(25 + (i / height) * 20)
                g = int(35 + (i / height) * 15)
                b = int(45 + (i / height) * 20)
                draw.line([(0, i), (width, i)], fill=(r, g, b))
            
            font = ImageFont.load_default()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = "–ê–ö–¢–£–ê–õ–¨–ù–´–ô –¢–†–ï–ù–î"
            draw.text((width//2, 100), title, font=font, fill=(255, 215, 0), anchor="mm")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            wrapped_text = textwrap.fill(trend, width=25)
            draw.text((width//2, 250), wrapped_text, font=font, fill=(255, 255, 255), anchor="mm")
            
            img_byte_arr = io.BytesIO()
            image.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            
            return img_byte_arr
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
