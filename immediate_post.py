import random
import requests
from pytrends.request import TrendReq
from PIL import Image, ImageDraw, ImageFont
import io
import textwrap
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', "8461091151:AAEd-mqGswAijmwFB0teeXeZFe-gtHfD-PI")
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID', "-1002201089739")
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', "AIzaSyCuWBy5qkUMO5oTAcIivzYSC0R9xiZjoUU")

NISHA = ["–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ä–µ–∫–ª–∞–º–∞", "–Ω–æ–≤–æ—Å—Ç–∏", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "digital", "SMM"]
GEO_LOCATION = 'RU'

def get_google_trends():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏–∑ Google Trends"""
    print("üìä –ó–∞–ø—Ä–æ—Å –∫ Google Trends...")
    try:
        pytrends = TrendReq(hl='ru-RU', tz=180)
        pytrends.build_payload(NISHA, timeframe='now 1-d', geo=GEO_LOCATION)
        trends_data = pytrends.related_queries()
        
        all_trends = []
        for key in NISHA:
            if key in trends_data and trends_data[key]['top'] is not None:
                all_trends.extend([row['query'] for _, row in trends_data[key]['top'].iterrows()])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
        filtered_trends = [t for t in all_trends if any(niche in t.lower() for niche in NISHA)]
        
        return list(set(filtered_trends)) if filtered_trends else get_fallback_trends()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Trends: {e}")
        return get_fallback_trends()

def get_fallback_trends():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –µ—Å–ª–∏ Google Trends –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    current_date = datetime.now().strftime("%Y")
    return [
        f"—Ç—Ä–µ–Ω–¥—ã digital –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ {current_date}",
        f"–Ω–æ–≤–æ—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π {current_date}",
        "SMM —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
        "–∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "—Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
        "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏ —Ä–µ–∫–ª–∞–º–µ"
    ]

def create_prompt(trend):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    return f"""–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏ —Ä–µ–∫–ª–∞–º–µ –Ω–∞ —Ç–µ–º—É: "{trend}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –∏ —Ñ–∞–∫—Ç–∞—Ö 2024-2025 –≥–æ–¥–∞
- –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
- –î–ª–∏–Ω–∞: 250-400 —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏ engaging
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∏–∑—ã–≤ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
- –°–¥–µ–ª–∞–π 2-3 –∞–±–∑–∞—Ü–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
- –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å 3-4 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–∞"""

def generate_text_with_gemini(trend):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini API"""
    print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini API...")
    
    prompt = create_prompt(trend)
    
    try:
        # –ü—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ Gemini API
        return generate_text_direct_api(trend, prompt)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
        return None

def generate_text_direct_api(trend, prompt):
    """–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Gemini API —á–µ—Ä–µ–∑ HTTP"""
    print("üåê –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Gemini API...")
    
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
    
    payload = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.7,
            "topP": 0.8,
            "maxOutputTokens": 500
        }
    }
    
    try:
        response = requests.post(
            url, 
            headers={'Content-Type': 'application/json'},
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if 'candidates' in result and result['candidates']:
                text = result['candidates'][0]['content']['parts'][0]['text']
                print("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API")
                return text.strip()
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {result}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def generate_text_fallback(trend):
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞...")
    
    fallback_texts = [
        f"üöÄ {trend}\n\n–°–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º, –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ 85% –≤ 2024 –≥–æ–¥—É! üìà\n\n–ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã:\n‚Ä¢ Short-form video –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç\n‚Ä¢ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ +200% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö\n\n–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞? üé¨\n\n#–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ #—Ç—Ä–µ–Ω–¥—ã2024 #digital",
        
        f"üéØ {trend}\n\n–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ 67% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª! üì±\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è +45% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏\n‚Ä¢ Voice search +30% —Ç—Ä–∞—Ñ–∏–∫–∞\n‚Ä¢ Instant apps +50% –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏\n\n–ö–∞–∫ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? üí°\n\n#–º–æ–±–∏–ª—å–Ω—ã–π #—Ç—Ä–∞—Ñ–∏–∫ #–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
        
        f"üî• {trend}\n\n–ü—Ä–æ—Ä—ã–≤ –≤ digital-—Ä–µ–∫–ª–∞–º–µ! –ö–æ–º–ø–∞–Ω–∏–∏ —Å–æ–æ–±—â–∞—é—Ç –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞ 35% –ø—Ä–∏ —Ä–æ—Å—Ç–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 55%! üí∞\n\n–ù–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã:\n‚Ä¢ Contextual targeting\n‚Ä¢ Predictive analytics\n‚Ä¢ Automated bidding\n\n–£–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã? üéØ\n\n#—Ä–µ–∫–ª–∞–º–∞ #digital #–∫–æ–Ω–≤–µ—Ä—Å–∏—è",
        
        f"üìà {trend}\n\n–ü–æ –¥–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤, email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ROI –¥–æ 4200% –≤ 2024 –≥–æ–¥—É! ‚úâÔ∏è\n\n–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏:\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è +45% –æ—Ç–∫—Ä—ã—Ç–∏–π\n‚Ä¢ Automation +60% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ Segmentation +35% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏\n\n–ö–∞–∫ —Å—Ç—Ä–æ–∏—Ç–µ email-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é? üíå\n\n#email–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ #ROI #–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
        
        f"üí´ {trend}\n\n–ù–æ–≤–∞—è —ç—Ä–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö! Stories –∏ Reels –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ 120% –±–æ–ª—å—à–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã. üì≤\n\n–¢–æ–ø-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n‚Ä¢ Instagram Reels\n‚Ä¢ TikTok\n‚Ä¢ YouTube Shorts\n‚Ä¢ Telegram Stories\n\n–ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ? üé•\n\n#smm #—Å–æ—Ü—Å–µ—Ç–∏ #–∫–æ–Ω—Ç–µ–Ω—Ç"
    ]
    
    return random.choice(fallback_texts)

def generate_image(trend):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
    try:
        width, height = 1000, 500
        image = Image.new('RGB', (width, height), color=(25, 35, 45))
        draw = ImageDraw.Draw(image)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for i in range(height):
            r = int(25 + (i / height) * 20)
            g = int(35 + (i / height) * 15)
            b = int(45 + (i / height) * 20)
            draw.line([(0, i), (width, i)], fill=(r, g, b))
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.load_default()
            # –ü—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            title_font = ImageFont.load_default()
            text_font = ImageFont.load_default()
        except:
            font = ImageFont.load_default()
            title_font = font
            text_font = font
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–ê–ö–¢–£–ê–õ–¨–ù–´–ô –¢–†–ï–ù–î"
        draw.text((width//2, 100), title, font=title_font, fill=(255, 215, 0), anchor="mm")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        wrapped_text = textwrap.fill(trend, width=25)
        draw.text((width//2, 250), wrapped_text, font=text_font, fill=(255, 255, 255), anchor="mm")
        
        # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        draw.rectangle([50, 50, width-50, height-50], outline=(255, 215, 0), width=3)
        
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)
        
        return img_byte_arr
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def post_to_telegram(text, image_bytes=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ Telegram"""
    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
    
    try:
        if image_bytes:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            files = {'photo': ('trend_image.png', image_bytes, 'image/png')}
            data = {
                'chat_id': TELEGRAM_CHANNEL_ID,
                'caption': text,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, files=files, data=data)
        else:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            data = {
                "chat_id": TELEGRAM_CHANNEL_ID,
                "text": text,
                "parse_mode": "HTML"
            }
            response = requests.post(url, data=data)
        
        if response.status_code == 200:
            print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –∏–∑ Google Trends
    trends = get_google_trends()
    print(f"üìä –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–Ω–¥—ã: {trends}")
    
    if not trends:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã")
        return 1
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
    selected_trend = random.choice(trends)
    print(f"üéØ –í—ã–±—Ä–∞–Ω —Ç—Ä–µ–Ω–¥: {selected_trend}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Gemini
    text = generate_text_with_gemini(selected_trend)
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if not text:
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞...")
        text = generate_text_fallback(selected_trend)
    
    if not text:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        return 1
        
    print(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{text}")
    print(f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    image_bytes = generate_image(selected_trend)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
    success = post_to_telegram(text, image_bytes)
    
    if success:
        print("üéâ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        return 0
    else:
        print("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.")
        return 1

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    # pip install pytrends requests Pillow
    
    exit_code = main()
    exit(exit_code)
