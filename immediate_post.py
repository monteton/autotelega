import random
import requests
from pytrends.request import TrendReq
from PIL import Image, ImageDraw, ImageFont
import io
import textwrap
import os
from datetime import datetime
import json
import base64

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8461091151:AAEd-mqGswAijmwFB0teeXeZFe-gtHfD-PI"
TELEGRAM_CHANNEL_ID = "-1002201089739"
GROK_API_KEY = "xai-RW56kLsDPrR7Wwm4xj9QDXFkeVYVIFQ2BpnP507yuziqcWPUQTwGnxgzKVVqzWwFo3oOCopD3OOyStp1"

NISHA = ["–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ä–µ–∫–ª–∞–º–∞", "–Ω–æ–≤–æ—Å—Ç–∏", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "digital", "SMM"]
GEO_LOCATION = 'RU'

def get_google_trends():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏–∑ Google Trends"""
    print("üìä –ó–∞–ø—Ä–æ—Å –∫ Google Trends...")
    try:
        pytrends = TrendReq(hl='ru-RU', tz=180)
        pytrends.build_payload(NISHA, timeframe='now 1-d', geo=GEO_LOCATION)
        trends_data = pytrends.related_queries()
        
        all_trends = []
        for key in NISHA:
            if key in trends_data and trends_data[key]['top'] is not None:
                all_trends.extend([row['query'] for _, row in trends_data[key]['top'].iterrows()])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
        filtered_trends = [t for t in all_trends if any(niche in t.lower() for niche in NISHA)]
        
        return list(set(filtered_trends)) if filtered_trends else get_fallback_trends()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Trends: {e}")
        return get_fallback_trends()

def get_fallback_trends():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –µ—Å–ª–∏ Google Trends –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    current_date = datetime.now().strftime("%Y")
    return [
        f"—Ç—Ä–µ–Ω–¥—ã digital –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ {current_date}",
        f"–Ω–æ–≤–æ—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π {current_date}",
        "SMM —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
        "–∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "—Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
        "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏ —Ä–µ–∫–ª–∞–º–µ"
    ]

def generate_text_with_grok(trend):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Grok API"""
    print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Grok API...")
    
    prompt = f"""–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏ —Ä–µ–∫–ª–∞–º–µ –Ω–∞ —Ç–µ–º—É: "{trend}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö 2024-2025 –≥–æ–¥–∞
- –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
- –î–ª–∏–Ω–∞: 250-400 —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏ engaging
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∏–∑—ã–≤ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
- –°–¥–µ–ª–∞–π 2-3 –∞–±–∑–∞—Ü–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
- –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å 3-4 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ"""

    try:
        url = "https://api.x.ai/v1/chat/completions"
        
        headers = {
            "Authorization": f"Bearer {GROK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "messages": [
                {
                    "role": "system", 
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "model": "grok-4-latest",
            "temperature": 0.7,
            "max_tokens": 500,
            "stream": False
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            generated_text = result['choices'][0]['message']['content']
            print("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Grok API")
            return generated_text.strip()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Grok API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Grok: {e}")
        return None

def generate_image_with_grok(trend):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Grok API"""
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Grok API...")
    
    try:
        url = "https://api.x.ai/v1/images/generations"
        
        headers = {
            "Authorization": f"Bearer {GROK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "grok-image-gen-latest",
            "prompt": f"–°–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –Ω–∞ —Ç–µ–º—É '{trend}'. –°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ digital-–∞—Ä—Ç–∞. –î–æ–±–∞–≤—å –∏–∫–æ–Ω–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º, —Å–æ—Ü—Å–µ—Ç—è–º–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.",
            "size": "1024x1024",
            "quality": "standard",
            "n": 1
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=60)
        
        if response.status_code == 200:
            result = response.json()
            image_url = result['data'][0]['url']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_response = requests.get(image_url, timeout=30)
            if img_response.status_code == 200:
                img_bytes = io.BytesIO(img_response.content)
                print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Grok API")
                return img_bytes
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_response.status_code}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return generate_fallback_image(trend)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return generate_fallback_image(trend)

def generate_fallback_image(trend):
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üñºÔ∏è –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        width, height = 1000, 500
        image = Image.new('RGB', (width, height), color=(25, 35, 45))
        draw = ImageDraw.Draw(image)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for i in range(height):
            r = int(25 + (i / height) * 20)
            g = int(35 + (i / height) * 15)
            b = int(45 + (i / height) * 20)
            draw.line([(0, i), (width, i)], fill=(r, g, b))
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.load_default()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–ê–ö–¢–£–ê–õ–¨–ù–´–ô –¢–†–ï–ù–î"
        draw.text((width//2, 100), title, font=font, fill=(255, 215, 0), anchor="mm")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        wrapped_text = textwrap.fill(trend, width=25)
        draw.text((width//2, 250), wrapped_text, font=font, fill=(255, 255, 255), anchor="mm")
        
        # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        draw.rectangle([50, 50, width-50, height-50], outline=(255, 215, 0), width=3)
        
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)
        
        return img_byte_arr
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def post_to_telegram(text, image_bytes=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ Telegram"""
    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
    
    try:
        if image_bytes:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            files = {'photo': ('trend_image.png', image_bytes, 'image/png')}
            data = {
                'chat_id': TELEGRAM_CHANNEL_ID,
                'caption': text,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, files=files, data=data)
        else:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            data = {
                "chat_id": TELEGRAM_CHANNEL_ID,
                "text": text,
                "parse_mode": "HTML"
            }
            response = requests.post(url, data=data)
        
        if response.status_code == 200:
            print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def verify_telegram_credentials():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Telegram credentials"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram credentials...")
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            bot_info = response.json()
            print(f"‚úÖ –ë–æ—Ç: {bot_info['result']['first_name']} (@{bot_info['result']['username']})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getChat"
            data = {"chat_id": TELEGRAM_CHANNEL_ID}
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                chat_info = response.json()
                print(f"‚úÖ –ö–∞–Ω–∞–ª: {chat_info['result']['title']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {response.text}")
                return False
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Telegram token: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram credentials
    if not verify_telegram_credentials():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram credentials")
        return 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –∏–∑ Google Trends
    trends = get_google_trends()
    print(f"üìä –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–Ω–¥—ã: {trends}")
    
    if not trends:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã")
        return 1
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
    selected_trend = random.choice(trends)
    print(f"üéØ –í—ã–±—Ä–∞–Ω —Ç—Ä–µ–Ω–¥: {selected_trend}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Grok
    text = generate_text_with_grok(selected_trend)
    
    if not text:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        return 1
        
    print(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{text}")
    print(f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —á–µ—Ä–µ–∑ Grok
    image_bytes = generate_image_with_grok(selected_trend)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
    success = post_to_telegram(text, image_bytes)
    
    if success:
        print("üéâ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        return 0
    else:
        print("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.")
        return 1

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    # pip install pytrends requests Pillow
    
    exit_code = main()
    exit(exit_code)
