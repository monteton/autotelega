import random
import requests
from pytrends.request import TrendReq
from PIL import Image, ImageDraw, ImageFont
import io
import textwrap
import os
from datetime import datetime
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "8461091151:AAEd-mqGswAijmwFB0teeXeZFe-gtHfD-PI"
TELEGRAM_CHANNEL_ID = "-1002201089739"
DEEPSEEK_API_KEY = "sk-53de7a895ba943f7b3a2c0873f130b2c"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á

NISHA = ["–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ä–µ–∫–ª–∞–º–∞", "–Ω–æ–≤–æ—Å—Ç–∏", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "digital", "SMM"]
GEO_LOCATION = 'RU'

def get_google_trends():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏–∑ Google Trends"""
    print("üìä –ó–∞–ø—Ä–æ—Å –∫ Google Trends...")
    try:
        pytrends = TrendReq(hl='ru-RU', tz=180)
        pytrends.build_payload(NISHA, timeframe='now 1-d', geo=GEO_LOCATION)
        trends_data = pytrends.related_queries()
        
        all_trends = []
        for key in NISHA:
            if key in trends_data and trends_data[key]['top'] is not None:
                all_trends.extend([row['query'] for _, row in trends_data[key]['top'].iterrows()])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
        filtered_trends = [t for t in all_trends if any(niche in t.lower() for niche in NISHA)]
        
        return list(set(filtered_trends)) if filtered_trends else get_fallback_trends()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Trends: {e}")
        return get_fallback_trends()

def get_fallback_trends():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –µ—Å–ª–∏ Google Trends –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    return [
        "—Ç—Ä–µ–Ω–¥—ã digital –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ 2024", "–Ω–æ–≤–æ—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π", 
        "SMM —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", "–∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞"
    ]

def generate_text_with_deepseek(trend):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek API"""
    print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek...")
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    prompt = f"""–°–æ–∑–¥–∞–π engaging –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏ —Ä–µ–∫–ª–∞–º–µ –Ω–∞ —Ç–µ–º—É: "{trend}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°—Ç–∏–ª—å: –ª–µ–≥–∫–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —é–º–æ—Ä–∞
- –î–ª–∏–Ω–∞: 180-280 —Å–∏–º–≤–æ–ª–æ–≤
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∏–∑—ã–≤ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

–§–æ—Ä–º–∞—Ç:
–ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
–í–æ–ø—Ä–æ—Å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
–•–µ—à—Ç–µ–≥–∏"""

    try:
        url = "https://api.deepseek.com/v1/chat/completions"
        
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system", 
                    "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∏ SMM. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è Telegram."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 350,
            "temperature": 0.8,
            "top_p": 0.9
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            generated_text = result['choices'][0]['message']['content']
            print("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ DeepSeek")
            return generated_text.strip()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {response.status_code}")
            return generate_text_fallback(trend)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ DeepSeek: {e}")
        return generate_text_fallback(trend)

def generate_text_fallback(trend):
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞...")
    
    fallback_texts = [
        f"üéØ {trend}\n\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –≤ –º–∏—Ä–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞! –ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º? ü§î\n\n–û–±—Å—É–¥–∏–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö? üëá\n\n#–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ #—Ç—Ä–µ–Ω–¥—ã #–Ω–æ–≤–æ—Å—Ç–∏",
        
        f"üî• {trend}\n\n–°–≤–µ–∂–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! –ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É —Ç—Ä–µ–Ω–¥—É? üí´\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –º–Ω–µ–Ω–∏–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö! üí¨\n\n#—Ä–µ–∫–ª–∞–º–∞ #digital #–æ–±—Å—É–∂–¥–µ–Ω–∏–µ",
        
        f"üöÄ {trend}\n\n–ù–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ digital-—Å—Ñ–µ—Ä–µ! –£–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤–Ω–µ–¥—Ä—è—Ç—å? üìä\n\n–î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã! üéØ\n\n#SMM #—Å–æ—Ü—Å–µ—Ç–∏ #–∫–µ–π—Å—ã",
        
        f"üí° {trend}\n\n–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤! –ö–∞–∫–∏–µ –º—ã—Å–ª–∏? üåü\n\n–ñ–¥—É –≤–∞—à–∏ –∏–¥–µ–∏ –∏ –æ–ø—ã—Ç! ‚úçÔ∏è\n\n#–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ #–∏–Ω—Å–∞–π—Ç—ã #–æ–ø—ã—Ç",
        
        f"üìà {trend}\n\n–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! –ö–∞–∫ –≤–∞–º —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥? ‚ö°\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ! ‚ù§Ô∏è\n\n#–Ω–æ–≤–æ—Å—Ç–∏ #–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ #–±–∏–∑–Ω–µ—Å"
    ]
    
    return random.choice(fallback_texts)

def generate_image(trend):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
    try:
        width, height = 1000, 500
        image = Image.new('RGB', (width, height), color=(30, 30, 50))
        draw = ImageDraw.Draw(image)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for i in range(height):
            r = int(30 + (i / height) * 25)
            g = int(30 + (i / height) * 20)
            b = int(50 + (i / height) * 25)
            draw.line([(0, i), (width, i)], fill=(r, g, b))
        
        try:
            title_font = ImageFont.truetype("arialbd.ttf", 42)
            text_font = ImageFont.truetype("arial.ttf", 28)
        except:
            title_font = ImageFont.load_default()
            text_font = ImageFont.load_default()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–ê–ö–¢–£–ê–õ–¨–ù–´–ô –¢–†–ï–ù–î"
        draw.text((width//2, 100), title, font=title_font, fill=(255, 215, 0), anchor="mm")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        wrapped_text = textwrap.fill(trend, width=30)
        draw.text((width//2, 250), wrapped_text, font=text_font, fill=(255, 255, 255), anchor="mm")
        
        # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        draw.rectangle([50, 50, width-50, height-50], outline=(255, 215, 0), width=3)
        
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)
        
        return img_byte_arr
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def post_to_telegram(text, image_bytes=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ Telegram"""
    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...")
    
    try:
        if image_bytes:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
            files = {'photo': ('trend_image.png', image_bytes, 'image/png')}
            data = {
                'chat_id': TELEGRAM_CHANNEL_ID,
                'caption': text,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, files=files, data=data)
        else:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
            data = {
                "chat_id": TELEGRAM_CHANNEL_ID,
                "text": text,
                "parse_mode": "HTML"
            }
            response = requests.post(url, data=data)
        
        response.raise_for_status()
        print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –∏–∑ Google Trends
    trends = get_google_trends()
    print(f"üìä –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–Ω–¥—ã: {trends}")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–Ω–¥
    selected_trend = random.choice(trends)
    print(f"üéØ –í—ã–±—Ä–∞–Ω —Ç—Ä–µ–Ω–¥: {selected_trend}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ DeepSeek
    text = generate_text_with_deepseek(selected_trend)
    print(f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n{text}")
    print(f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    image_bytes = generate_image(selected_trend)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
    success = post_to_telegram(text, image_bytes)
    
    if success:
        print("üéâ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        return 0
    else:
        print("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.")
        return 1

if __name__ == "__main__":
    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ DeepSeek API –∫–ª—é—á–∞:
    # 1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://platform.deepseek.com/
    # 2. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    # 3. –ó–∞–º–µ–Ω–∏—Ç–µ "your_deepseek_api_key_here" –Ω–∞ –≤–∞—à –∫–ª—é—á
    
    exit_code = main()
    exit(exit_code)
